#############################################################################
# Mandatory configuration parameters
#############################################################################

# Multicast group used by multicaster
# Values: IP PORT
multicast 239.00.0.1 6667

# Configuration of individual acceptors:
# - Address of the machine hosting them
# - Port used for ring communications
# - Port to which learners can ask for retransmissions //TODO not used at the moment//
# Values: PROC_ID IP RING_PORT LEARNERS_PORT
acceptor 1 127.0.0.1 7771 5551
acceptor 2 127.0.0.1 7772 5552
acceptor 3 127.0.0.1 7773 5553

# Intervals used by the Paxos leader for Phase 1 and Phase 2 respectively
# i.e. Amount of time that has to pass before the leader retries to execute some instance 
# Values: SECONDS MICROSECONDS
p1_interval 1 0
p2_interval 1 0

# Paxos quorum size (there is no distinction between read and write quorums ATM).
# This is the number of acceptors that need to acknowledge a request to the leader
# for him to be considered successful. I.e. Phase 1, Phase 2.
quorum_size 2

#############################################################################
# Optional configuration parameters
#############################################################################

# Size of kernel buffers (read and write) assigned to each socket.
# If not set, the default value is used, e.g. net.core.rmem_default on Linux
# Values: BYTES 
socket_buffers_size 2097152

# This interval defines how frequently the multicaster wakes up for routine jobs 
# like checking timeouts, starting new instances, etc.
# Having this value bigger than Phase1/Phase2 timeout is pointless, so an error is triggered.
# Values: SECONDS MICROSECONDS (default: 0.1 seconds)
mcaster_clock_interval 0 500000

# This interval defines how frequently the learner checks for gaps.
# A 'Gap' is a situation where the learner knows the outcome of some instance i
# but it doesn't know the outcome of some previous instance (i.e. i-1).
# Since i cannot be delivered before i-1, the learner has to wait.
# A gap may happen if the learner does not know i) the final identifier chosen for some instance, 
# or ii) the command value associated to a chosen identifier.
# Values: SECONDS MICROSECONDS (default: 1 second)
delivery_check_interval 0 500000

# Defines how long an learner waits before asking again for a retransmission.
# The same value is used in the multicaster to avoid repeating a command map too frequently
# (i.e. if multiple learners request it at the same time)
# Values: SECONDS MICROSECONDS (default: 1 second)
retransmit_request_interval 0 100000

# This interval defines how frequently network senders automatically flush their buffers.
# Notice that this does NOT automatically enable auto-flushing, calling
# This just used for senders on which udp_sender_enable_default_autoflush() is invoked.
# Values: MILLISECONDS (default: 50)
default_autoflush_interval 100

# The MAXIMUM number of instances that one expects to be active concurrently (phase 1 and 2).
# Must be bigger than (max_active_instances+phase1_window_size) to ensure proper caching.
# This parameter is used when allocating static storage structures.
#(i.e. circular buffers used as cache by acceptors, learners, multicaster).
# Values: INTEGER (default: 100)
working_set_size 100

# The maximum number of instances for which the multicaster/leader will start phase 2 concurrently.
# Values: INTEGER (default: 25)
max_active_instances 30

# Number of instances for which the multicaster/leader will pre-execute phase 1
# Values: INTEGER (default: 50)
preexecution_window_size 50

# Limits the maximum number of new instances open each time the mulicaster/leader wakes up
# (as defined by mcaster_clock_interval). This value should be set so that it doesn't overflow 
# receiver's sockets, depending on the values size.
# Values: INTEGER (default: 10)
max_p2_open_per_iteration 12

# Defines how many client values the multicaster/leader accepts and queues, if such queue grows
# beyond this size, client values will be dropped.
# Values: INTEGER (default: 100)
max_client_values_queue_size 250